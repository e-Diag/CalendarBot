package main

import (
	"fmt"

	"log"

	"os"

	"strconv"

	"strings"

	"time"

	"scheduler/pkg/scheduler" // –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –ø–∞–∫–µ—Ç–∞ scheduler

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/joho/godotenv"
)

// Global constants

const (
	DateFormat = "2006-01-02 15:04"
)

// BotState –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

type BotState struct {
	State string

	Type string

	DraftItem *scheduler.ScheduleItem
}

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞

type Bot struct {
	api *tgbotapi.BotAPI

	repo scheduler.Repository

	userStates map[int64]*BotState
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

func NewBot(token string, repo scheduler.Repository) (*Bot, error) {

	api, err := tgbotapi.NewBotAPI(token)

	if err != nil {

		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ API –±–æ—Ç–∞: %w", err)

	}

	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @%s", api.Self.UserName)

	return &Bot{

		api: api,

		repo: repo,

		userStates: make(map[int64]*BotState),
	}, nil

}

// GetMainMenuKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞ —Å TMA –∏ –∫–Ω–æ–ø–∫–æ–π –ø–ª–∞–Ω–æ–≤

func GetMainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ TMA_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

	tmaURL := os.Getenv("TMA_URL")

	if tmaURL == "" {

		tmaURL = "https://t.me/telegram" // –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞

		log.Println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: TMA_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.")

	}

	return tgbotapi.NewReplyKeyboard(

		tgbotapi.NewKeyboardButtonRow(

			tgbotapi.NewKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (TMA)"),

			tgbotapi.NewKeyboardButton("üóì –ú–æ–∏ –ü–ª–∞–Ω—ã"),
		),
	)

}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

func (b *Bot) SendMessage(chatID int64, text string, markup interface{}) {

	msg := tgbotapi.NewMessage(chatID, text)

	if markup != nil {

		msg.ReplyMarkup = markup

	}

	msg.ParseMode = tgbotapi.ModeMarkdown

	b.api.Send(msg)

}

// SendReminder –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

func (b *Bot) SendReminder(userID string, text string) {

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID –æ–±—Ä–∞—Ç–Ω–æ –≤ int64 –¥–ª—è Telegram API

	chatID, err := strconv.ParseInt(userID, 10, 64)

	if err != nil {

		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å userID %s –≤ int64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: %v", userID, err)

		return

	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

	b.SendMessage(chatID, text, nil)

}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

func (b *Bot) Run() {

	// 1. –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–≥–æ—Ä—É—Ç–∏–Ω–∞)

	go scheduler.ReminderSchedulerLoop(b.repo, b.SendReminder)

	// 2. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram

	u := tgbotapi.NewUpdate(0)

	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {

		if update.Message != nil {

			b.handleMessage(update.Message)

		} else if update.InlineQuery != nil {

			b.handleInlineQuery(update.InlineQuery)

		} else if update.CallbackQuery != nil {

			b.handleCallbackQuery(update.CallbackQuery)

		}

	}

}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

func (b *Bot) handleMessage(message *tgbotapi.Message) {

	userID := message.From.ID

	chatID := message.Chat.ID

	text := message.Text

	strUserID := strconv.FormatInt(userID, 10)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ)

	_, err := b.repo.GetUser(strUserID)

	if err != nil {

		_ = b.initNewUser(strUserID, message.From.UserName)

	}

	if message.IsCommand() {

		b.handleCommand(chatID, userID, message.Command())

	} else {

		// –õ–æ–≥–∏–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∞ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ü–ª–∞–Ω—ã"

		switch text {

		case "üóì –ú–æ–∏ –ü–ª–∞–Ω—ã":

			b.showCalendar(chatID, userID)

		case "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (TMA)":

			tmaURL := os.Getenv("TMA_URL")

			if tmaURL == "" {

				tmaURL = "https://t.me/telegram"

			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å

			b.SendMessage(chatID, fmt.Sprintf("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: %s", tmaURL), GetMainMenuKeyboard())

		}

		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ TMA

	}

}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫

func (b *Bot) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {

	callbackData := callbackQuery.Data

	chatID := callbackQuery.Message.Chat.ID

	_ = callbackQuery.From.ID

	// 1. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ Callback Query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

	callback := tgbotapi.NewCallback(callbackQuery.ID, "–û—Ç–∫—Ä—ã–≤–∞–µ–º TMA...")

	if _, err := b.api.Request(callback); err != nil {

		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ Callback:", err)

	}

	// –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: access_<item_id>

	if strings.HasPrefix(callbackData, "access_") {

		itemID := strings.TrimPrefix(callbackData, "access_")

		// 2. –ü–æ–ª—É—á–∞–µ–º TMA URL

		tmaURL := os.Getenv("TMA_URL")

		if tmaURL == "" {

			tmaURL = "https://t.me/telegram"

		}

		// 3. –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è TMA —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID –∑–∞–º–µ—Ç–∫–∏

		// –≠—Ç–æ—Ç URL TMA (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥) –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å, –∫–∞–∫ —Ä–∞–∑–æ–±—Ä–∞—Ç—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—Ç–∫—É.

		// –ü—Ä–∏–º–µ—Ä: https://your-tma.com/app?edit_id=<itemID>

		editURL := fmt.Sprintf("%s?edit_id=%s", tmaURL, itemID)

		// 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

		msgText := fmt.Sprintf("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É %s:\n%s", itemID, editURL)

		b.SendMessage(chatID, msgText, GetMainMenuKeyboard())

		// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ TMA –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tgbotapi.NewInlineKeyboardMarkupWithURL

		// –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –≤ TMA", –Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —Ç–µ–∫—Å—Ç–æ–º.

	}

}

// initNewUser —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å TZ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ

func (b *Bot) initNewUser(strUserID, username string) *scheduler.User {

	user := scheduler.NewUser(strUserID, username)

	defaultTZ := os.Getenv("DEFAULT_TIMEZONE")

	if defaultTZ == "" {

		defaultTZ = "Europe/Moscow"

	}

	user.SetTimeZone(defaultTZ)

	b.repo.SaveUser(user)

	return user

}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞

func (b *Bot) handleCommand(chatID int64, userID int64, command string) {

	switch command {

	case "start":

		welcomeText := "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (TMA)' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ 'üóì –ú–æ–∏ –ü–ª–∞–Ω—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è."

		b.SendMessage(chatID, welcomeText, GetMainMenuKeyboard())

		b.userStates[chatID] = nil

	default:

		b.SendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", nil)

	}

}

// showCalendar –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

func (b *Bot) showCalendar(chatID int64, userID int64) {

	strUserID := strconv.FormatInt(userID, 10)

	user, err := b.repo.GetUser(strUserID)

	if err != nil {

		b.SendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ /start, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.", GetMainMenuKeyboard())

		return

	}

	// –í—Ä–µ–º—è –±–µ—Ä–µ—Ç—Å—è –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	nowLocal := time.Now().In(user.TimeZone)

	// –ù–∞—á–∞–ª–æ –¥–Ω—è –≤ UTC (–¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ)

	startOfDayLocal := time.Date(nowLocal.Year(), nowLocal.Month(), nowLocal.Day(), 0, 0, 0, 0, user.TimeZone)

	startOfDayUTC := startOfDayLocal.In(time.UTC)

	items, err := b.repo.GetItemsForUserOnDay(strUserID, startOfDayUTC)

	if err != nil {

		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤: %v", err)

		b.SendMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", GetMainMenuKeyboard())

		return

	}

	response := fmt.Sprintf("üóì **–í–∞—à–∏ –ø–ª–∞–Ω—ã –Ω–∞ %s (TZ: %s)**:\n\n",

		nowLocal.Format("02.01.2006"), user.TimeZone.String())

	if len(items) == 0 {

		response += "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ó–∞–º–µ—Ç–æ–∫, –°–æ–±—ã—Ç–∏–π –∏–ª–∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."

	} else {

		for _, item := range items {

			response += item.ToString(user.TimeZone) + "\n"

		}

	}

	b.SendMessage(chatID, response, GetMainMenuKeyboard())

}

// handleInlineQuery –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –ø–ª–∞–Ω–∞–º–∏

func (b *Bot) handleInlineQuery(inlineQuery *tgbotapi.InlineQuery) {

	queryText := strings.TrimSpace(inlineQuery.Query)

	userID := strconv.FormatInt(inlineQuery.From.ID, 10)

	items, err := b.repo.SearchItemsByTitle(queryText, userID)

	if err != nil {

		log.Printf("–û—à–∏–±–∫–∞ Inline Search: %v", err)

		return

	}

	results := make([]interface{}, 0, len(items))

	user, _ := b.repo.GetUser(userID)

	for i, item := range items {

		messageContent := tgbotapi.InputTextMessageContent{

			Text: item.ToString(user.TimeZone),

			ParseMode: tgbotapi.ModeMarkdown,
		}

		// –ö–Ω–æ–ø–∫–∞, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±–æ—Ç –ø–æ–ª—É—á–∏—Ç CallbackQuery

		keyboard := tgbotapi.NewInlineKeyboardMarkup(

			tgbotapi.NewInlineKeyboardRow(

				tgbotapi.NewInlineKeyboardButtonData("üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ (TMA)", fmt.Sprintf("access_%s", item.ID)),
			),
		)

		article := tgbotapi.NewInlineQueryResultArticle(

			fmt.Sprintf("%d", i),

			fmt.Sprintf("%s: %s", item.Type, item.Title),

			item.Content,
		)

		article.InputMessageContent = messageContent

		article.ReplyMarkup = &keyboard

		results = append(results, article)

	}

	if len(results) == 0 && queryText != "" {

		article := tgbotapi.NewInlineQueryResultArticle(

			"no_results",

			"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",

			"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
		)

		article.InputMessageContent = tgbotapi.InputTextMessageContent{

			Text: "–Ø –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.",
		}

		results = append(results, article)

	}

	inlineConf := tgbotapi.InlineConfig{

		InlineQueryID: inlineQuery.ID,

		IsPersonal: true,

		Results: results,

		CacheTime: 0,
	}

	if _, err := b.api.Request(inlineConf); err != nil {

		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Inline Query:", err)

	}

}

func main() {

	err := godotenv.Load()

	if err != nil {

		log.Println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª .env. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.")

	}

	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")

	if botToken == "" {

		log.Fatal("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")

	}

	repo := scheduler.NewInMemoryRepo()

	bot, err := NewBot(botToken, repo)

	if err != nil {

		log.Fatal(err)

	}

	// --- –î–ï–ú–û-–î–ê–ù–ù–´–ï ---

	testUserID := os.Getenv("TEST_USER_ID")

	if testUserID != "" {

		log.Printf("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", testUserID)

		_ = bot.initNewUser(testUserID, "DemoUser")

		// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞

		testEvent := &scheduler.ScheduleItem{

			OwnerID: testUserID,

			Type: "Event",

			Title: "–°–æ–≤–µ—â–∞–Ω–∏–µ –ø–æ TMA",

			Content: "–û–±—Å—É–¥–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Bubble.io. –í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!",

			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞

			TargetTimeUTC: time.Now().In(time.UTC).Add(2 * time.Minute),

			IsEditable: true,
		}

		repo.AddItem(testEvent)

		log.Println("–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã).")

	} else {

		log.Println("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TEST_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

	}

	// ---------------------------------

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")

	bot.Run()
}
