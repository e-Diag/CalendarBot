package scheduler

import (
	"fmt"
	"log"
	"strings"
	"sync"
	"time"

	"github.com/google/uuid"
)

// DateFormat –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏
const DateFormat = "2006-01-02 15:04"

// User –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º.
type User struct {
	ID         string
	Username   string
	TimeZone   *time.Location
	TzAsString string // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏
}

// NewUser —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä User
func NewUser(id, username string) *User {
	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTC, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.
	loc, _ := time.LoadLocation("UTC")
	return &User{
		ID:       id,
		Username: username,
		TimeZone: loc,
	}
}

// SetTimeZone —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (u *User) SetTimeZone(tzName string) error {
	loc, err := time.LoadLocation(tzName)
	if err != nil {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: %w", err)
	}
	u.TimeZone = loc
	u.TzAsString = tzName
	return nil
}

// ScheduleItem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.
type ScheduleItem struct {
	ID            string
	OwnerID       string
	Type          string // "Note", "Event", "Reminder"
	Title         string
	Content       string
	TargetTimeUTC time.Time // –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤ UTC
	IsEditable    bool
}

// NewItem —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func NewItem(ownerID, itemType, title, content string, targetTime time.Time) *ScheduleItem {
	return &ScheduleItem{
		ID:            uuid.New().String(),
		OwnerID:       ownerID,
		Type:          itemType,
		Title:         title,
		Content:       content,
		TargetTimeUTC: targetTime.In(time.UTC),
		IsEditable:    true,
	}
}

// ToString —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (item *ScheduleItem) ToString(loc *time.Location) string {
	timeLocal := item.TargetTimeUTC.In(loc)
	timeStr := timeLocal.Format(DateFormat)

	// –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—Ç–∫–∞
	if item.Type == "Note" {
		timeStr = "–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏"
	}

	return fmt.Sprintf("‚û°Ô∏è **%s** (%s) \n*%s* \n```\n%s\n```\n",
		item.Title, item.Type, timeStr, item.Content)
}

// --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ---

// Repository –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–∞–Ω–Ω—ã—Ö (–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è).
type Repository interface {
	SaveUser(*User)
	GetUser(id string) (*User, error)
	AddItem(*ScheduleItem)
	UpdateItem(*ScheduleItem)
	DeleteItem(id string)
	GetItemsForUserOnDay(userID string, startOfDayUTC time.Time) ([]*ScheduleItem, error)
	GetDueReminders(nowUTC time.Time) ([]*ScheduleItem, error)
	SearchItemsByTitle(query, userID string) ([]*ScheduleItem, error)
}

// InMemoryRepo - –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏).
type InMemoryRepo struct {
	users map[string]*User
	items map[string]*ScheduleItem
	mu    sync.RWMutex
}

// NewInMemoryRepo —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π InMemoryRepo.
func NewInMemoryRepo() *InMemoryRepo {
	return &InMemoryRepo{
		users: make(map[string]*User),
		items: make(map[string]*ScheduleItem),
	}
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Repository...

func (r *InMemoryRepo) SaveUser(user *User) {
	r.mu.Lock()
	defer r.mu.Unlock()
	r.users[user.ID] = user
}

func (r *InMemoryRepo) GetUser(id string) (*User, error) {
	r.mu.RLock()
	defer r.mu.RUnlock()
	if user, ok := r.users[id]; ok {
		return user, nil
	}
	return nil, fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
}

func (r *InMemoryRepo) AddItem(item *ScheduleItem) {
	r.mu.Lock()
	defer r.mu.Unlock()
	r.items[item.ID] = item
}

func (r *InMemoryRepo) UpdateItem(item *ScheduleItem) {
	r.mu.Lock()
	defer r.mu.Unlock()
	r.items[item.ID] = item
}

func (r *InMemoryRepo) DeleteItem(id string) {
	r.mu.Lock()
	defer r.mu.Unlock()
	delete(r.items, id)
}

func (r *InMemoryRepo) GetItemsForUserOnDay(userID string, startOfDayUTC time.Time) ([]*ScheduleItem, error) {
	r.mu.RLock()
	defer r.mu.RUnlock()

	endOfDayUTC := startOfDayUTC.Add(24 * time.Hour)
	items := make([]*ScheduleItem, 0)

	for _, item := range r.items {
		if item.OwnerID == userID &&
			(item.Type == "Note" || // –ó–∞–º–µ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
				(item.TargetTimeUTC.After(startOfDayUTC) && item.TargetTimeUTC.Before(endOfDayUTC))) {
			items = append(items, item)
		}
	}
	return items, nil
}

func (r *InMemoryRepo) SearchItemsByTitle(query, userID string) ([]*ScheduleItem, error) {
	r.mu.RLock()
	defer r.mu.RUnlock()

	results := make([]*ScheduleItem, 0)
	query = strings.ToLower(query)

	for _, item := range r.items {
		if item.OwnerID == userID && strings.Contains(strings.ToLower(item.Title), query) {
			results = append(results, item)
		}
	}
	return results, nil
}

// GetDueReminders –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª –∏–ª–∏ —É–∂–µ –ø—Ä–æ—à–µ–ª.
func (r *InMemoryRepo) GetDueReminders(nowUTC time.Time) ([]*ScheduleItem, error) {
	r.mu.Lock()
	defer r.mu.Unlock()

	dueItems := make([]*ScheduleItem, 0)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å,
	// —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
	itemsToDelete := []string{}

	for _, item := range r.items {
		// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ç–∏–ø "Reminder" –∏–ª–∏ "Event"
		if item.OwnerID != "" && item.Type != "Note" && !item.TargetTimeUTC.IsZero() && item.TargetTimeUTC.Before(nowUTC) {
			dueItems = append(dueItems, item)

			// –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º (—Ç.–µ. –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ),
			// –º—ã –µ–≥–æ —É–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.
			if !item.IsEditable {
				itemsToDelete = append(itemsToDelete, item.ID)
			}
		}
	}

	// –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
	for _, id := range itemsToDelete {
		delete(r.items, id)
	}

	return dueItems, nil
}

// ReminderSender - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.
type ReminderSender func(userID string, text string)

// ReminderSchedulerLoop - –ì–û-–†–£–¢–ò–ù–ê, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
func ReminderSchedulerLoop(repo Repository, sender ReminderSender) {
	log.Println("–î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
	// –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
	ticker := time.NewTicker(30 * time.Second)

	for range ticker.C {
		nowUTC := time.Now().In(time.UTC)
		reminders, err := repo.GetDueReminders(nowUTC)

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: %v", err)
			continue
		}

		for _, item := range reminders {
			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
			reminderText := fmt.Sprintf("üîî **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï** (‚è∞ %s UTC):\n%s",
				item.TargetTimeUTC.Format(DateFormat), item.Content)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			sender(item.OwnerID, reminderText)

			log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", item.OwnerID, item.Title)
		}
	}
}
